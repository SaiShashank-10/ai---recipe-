/*
  # Process Recipe Edge Function

  This function handles:
  1. AI recipe card generation using OpenAI
  2. Email delivery to users
  3. Notifications to S-Hatch team
  
  Note: PDF generation is now handled client-side for better performance
*/

import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'npm:@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
}

interface Recipe {
  id: string
  user_id: string
  title: string
  description: string
  ingredients: Array<{ name: string; amount: string; unit: string }>
  instructions: string[]
  prep_time: number
  cook_time: number
  servings: number
  difficulty: string
  cuisine_type?: string
  dietary_restrictions?: string[]
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const { recipeId } = await req.json()

    // Get recipe details
    const { data: recipe, error: recipeError } = await supabaseClient
      .from('recipes')
      .select('*')
      .eq('id', recipeId)
      .single()

    if (recipeError || !recipe) {
      throw new Error('Recipe not found')
    }

    // Update status to processing
    await supabaseClient
      .from('recipes')
      .update({ status: 'processing' })
      .eq('id', recipeId)

    // Get user details
    const { data: { user }, error: userError } = await supabaseClient.auth.admin.getUserById(recipe.user_id)
    
    if (userError || !user) {
      throw new Error('User not found')
    }

    // Generate AI recipe card
    const aiCard = await generateAIRecipeCard(recipe)

    // Update recipe with AI card
    await supabaseClient
      .from('recipes')
      .update({
        status: 'completed',
        ai_generated_card: aiCard
      })
      .eq('id', recipeId)

    // Send email to user (without PDF attachment for now)
    await sendEmailToUser(user.email!, recipe)

    // Notify S-Hatch team
    await notifyTeam(user, recipe)

    return new Response(
      JSON.stringify({ success: true, message: 'Recipe processed successfully' }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    )

  } catch (error) {
    console.error('Error processing recipe:', error)

    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400
      }
    )
  }
})

async function generateAIRecipeCard(recipe: Recipe): Promise<string> {
  try {
    const openaiKey = Deno.env.get('OPENAI_API_KEY')
    if (!openaiKey) {
      throw new Error('OpenAI API key not configured')
    }

    const prompt = `Create a beautiful, professional recipe card description for the following recipe:

Title: ${recipe.title}
Description: ${recipe.description}
Servings: ${recipe.servings}
Prep Time: ${recipe.prep_time} minutes
Cook Time: ${recipe.cook_time} minutes
Difficulty: ${recipe.difficulty}
${recipe.cuisine_type ? `Cuisine: ${recipe.cuisine_type}` : ''}
${recipe.dietary_restrictions?.length ? `Dietary: ${recipe.dietary_restrictions.join(', ')}` : ''}

Ingredients:
${recipe.ingredients.map(ing => `- ${ing.amount} ${ing.unit} ${ing.name}`).join('\n')}

Instructions:
${recipe.instructions.map((inst, i) => `${i + 1}. ${inst}`).join('\n')}

Please create an engaging, professional recipe card description that highlights the key features and appeal of this recipe. Focus on what makes it special and delicious.`

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'You are a professional food writer and recipe expert. Create engaging, appetizing recipe descriptions.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 500,
        temperature: 0.7
      })
    })

    const data = await response.json()
    return data.choices[0]?.message?.content || 'AI-generated recipe card description'

  } catch (error) {
    console.error('Error generating AI card:', error)
    return 'Beautiful recipe card generated by AI'
  }
}

async function sendEmailToUser(email: string, recipe: Recipe) {
  try {
    const smtpConfig = {
      host: Deno.env.get('SMTP_HOST'),
      port: parseInt(Deno.env.get('SMTP_PORT') || '587'),
      user: Deno.env.get('SMTP_USER'),
      pass: Deno.env.get('SMTP_PASS')
    }

    // Email sending logic would go here
    console.log(`Would send email to ${email} for recipe: ${recipe.title}`)

    // In a real implementation, you would use an email service like:
    // - Supabase Edge Functions with Resend
    // - SendGrid
    // - Nodemailer with SMTP
    
  } catch (error) {
    console.error('Error sending email:', error)
  }
}

async function notifyTeam(user: any, recipe: Recipe) {
  try {
    const teamEmail = Deno.env.get('SHATCH_NOTIFICATION_EMAIL') || 'team@s-hatch.com'
    
    const notification = {
      type: 'recipe_submission',
      user_email: user.email,
      user_id: user.id,
      recipe_title: recipe.title,
      recipe_id: recipe.id,
      timestamp: new Date().toISOString()
    }

    // Send notification to team
    console.log(`Team notification:`, notification)

    // In a real implementation, you would send this via:
    // - Email to the team
    // - Slack webhook
    // - Database logging
    // - Push notification service

  } catch (error) {
    console.error('Error notifying team:', error)
  }
}